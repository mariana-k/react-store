{"ast":null,"code":"import _classCallCheck from \"/mydisk/learning/courses/freecodecamp-react/react-store/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mydisk/learning/courses/freecodecamp-react/react-store/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/mydisk/learning/courses/freecodecamp-react/react-store/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/mydisk/learning/courses/freecodecamp-react/react-store/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/mydisk/learning/courses/freecodecamp-react/react-store/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/mydisk/learning/courses/freecodecamp-react/react-store/src/components/ProductList.js\";\nimport React, { Component } from 'react';\nimport Product from './Product';\nimport Title from './Title';\nimport { handleChange, ProductConsumer } from '../context';\nvar currentList = [];\n\nvar ProductList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProductList, _Component);\n\n  function ProductList() {\n    _classCallCheck(this, ProductList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProductList).apply(this, arguments));\n  }\n\n  _createClass(ProductList, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      // Variable to hold the original version of the list\n      // Variable to hold the filtered list before putting into state\n      var newList = []; // If the search bar isn't empty\n\n      if (e.target.value !== \"\") {\n        // Assign the original list to currentList\n        // Use .filter() to determine which items should be displayed\n        // based on the search terms\n        newList = this.state.products.filter(function (item) {\n          // change current item to lowercase\n          var lc = item.toLowerCase(); // change search term to lowercase\n\n          var filter = e.target.value.toLowerCase(); // check to see if the current list item includes the search term\n          // If it does, it will be added to newList. Using lowercase eliminates\n          // issues with capitalization in search terms and search content\n\n          return lc.includes(filter);\n        });\n      } else {\n        // If the search bar is empty, set newList to original task list\n        newList = this.state.products;\n      } // Set the filtered state based on what our rules added to newList\n\n\n      this.setState({\n        filtered: newList\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"py-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"input\",\n        onChange: handleChange,\n        placeholder: \"Search...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(Title, {\n        name: \"our\",\n        title: \"products\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(ProductConsumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, function (value) {\n        return value.filtered.map(function (product) {\n          return React.createElement(Product, {\n            key: product.product_id,\n            product: product,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          });\n        });\n      })))));\n    }\n  }]);\n\n  return ProductList;\n}(Component);\n\nexport { ProductList as default };","map":{"version":3,"sources":["/mydisk/learning/courses/freecodecamp-react/react-store/src/components/ProductList.js"],"names":["React","Component","Product","Title","handleChange","ProductConsumer","currentList","ProductList","e","newList","target","value","state","products","filter","item","lc","toLowerCase","includes","setState","filtered","map","product","product_id"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAAQC,YAAR,EAAsBC,eAAtB,QAA4C,YAA5C;AACA,IAAIC,WAAW,GAAG,EAAlB;;IACqBC,W;;;;;;;;;;;;;iCAGNC,C,EAAG;AACd;AAEA;AACF,UAAIC,OAAO,GAAG,EAAd,CAJgB,CAMd;;AACF,UAAID,CAAC,CAACE,MAAF,CAASC,KAAT,KAAmB,EAAvB,EAA2B;AACrB;AAGA;AACA;AACNF,QAAAA,OAAO,GAAG,KAAKG,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2B,UAAAC,IAAI,EAAI;AACnC;AACR,cAAMC,EAAE,GAAGD,IAAI,CAACE,WAAL,EAAX,CAF2C,CAGnC;;AACR,cAAMH,MAAM,GAAGN,CAAC,CAACE,MAAF,CAASC,KAAT,CAAeM,WAAf,EAAf,CAJ2C,CAKnC;AACA;AACA;;AACR,iBAAOD,EAAE,CAACE,QAAH,CAAYJ,MAAZ,CAAP;AACD,SATS,CAAV;AAUC,OAhBD,MAgBO;AACD;AACNL,QAAAA,OAAO,GAAG,KAAKG,KAAL,CAAWC,QAArB;AACC,OA1Be,CA2Bd;;;AACF,WAAKM,QAAL,CAAc;AACdC,QAAAA,QAAQ,EAAEX;AADI,OAAd;AAGC;;;6BAEQ;AACP,aACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAES;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAC,OAA7B;AAAqC,QAAA,QAAQ,EAAEL,YAA/C;AAA6D,QAAA,WAAW,EAAC,WAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFT,EAIE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,KAAZ;AAAkB,QAAA,KAAK,EAAC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEM,UAAAO,KAAK,EAAI;AAET,eAEEA,KAAK,CAACS,QAAN,CAAeC,GAAf,CACE,UAAAC,OAAO,EAAI;AACX,iBAGA,oBAAC,OAAD;AAAS,YAAA,GAAG,EAAEA,OAAO,CAACC,UAAtB;AAAkC,YAAA,OAAO,EAAED,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHA;AAKE,SAPJ,CAFF;AAWC,OAfP,CADA,CALF,CADF,CAFJ,CADJ;AAiCD;;;;EAtEsCrB,S;;SAApBM,W","sourcesContent":["import React, { Component } from 'react'\nimport Product from './Product'\nimport Title from './Title'\nimport {handleChange, ProductConsumer} from '../context'\nlet currentList = [];\nexport default class ProductList extends Component {\n\n  \n  handleChange(e) {\n    // Variable to hold the original version of the list\n  \n    // Variable to hold the filtered list before putting into state\n  let newList = [];\n  \n    // If the search bar isn't empty\n  if (e.target.value !== \"\") {\n        // Assign the original list to currentList\n  \n  \n        // Use .filter() to determine which items should be displayed\n        // based on the search terms\n  newList = this.state.products.filter(item => {\n            // change current item to lowercase\n    const lc = item.toLowerCase();\n            // change search term to lowercase\n    const filter = e.target.value.toLowerCase();\n            // check to see if the current list item includes the search term\n            // If it does, it will be added to newList. Using lowercase eliminates\n            // issues with capitalization in search terms and search content\n    return lc.includes(filter);\n  });\n  } else {\n        // If the search bar is empty, set newList to original task list\n  newList = this.state.products;\n  }\n    // Set the filtered state based on what our rules added to newList\n  this.setState({\n  filtered: newList\n  });\n  }\n\n  render() {\n    return (\n        <React.Fragment>\n            \n            <div className=\"py-5\">\n              <div className=\"container\">\n                \n                       <input type=\"text\" className=\"input\" onChange={handleChange} placeholder=\"Search...\" />\n                    \n                <Title name=\"our\" title=\"products\"/>\n                <div className=\"row\">\n                <ProductConsumer>\n                  {\n                      value => {\n\n                      return (\n                        \n                        value.filtered.map (\n                          product => {\n                          return (\n                            \n                            \n                          <Product key={product.product_id} product={product}/>\n                          \n                          )}\n                      ))\n                      }\n                  }\n              </ProductConsumer>\n                </div>\n              </div>\n            </div>\n        </React.Fragment>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}